import asyncio
import os
from google.adk.agents import LoopAgent, LlmAgent, BaseAgent, SequentialAgent
from google.genai import types
from google.adk.runners import InMemoryRunner
from google.adk.agents.invocation_context import InvocationContext
from google.adk.tools.tool_context import ToolContext
from typing import AsyncGenerator, Optional
from google.adk.events import Event, EventActions
from google.adk.agents.llm_agent import Agent
# Part of agent.py --> Follow https://google.github.io/adk-docs/get-started/quickstart/ to learn the setup

# --- 1. Define Sub-Agents for Each Pipeline Stage ---

# Code Writer Agent
# Takes the initial specification (from user query) and writes code.
Slide_count_agent = LlmAgent(
    name="SlideTopicAndStyleGenerator",
    model="gemini-1.5-flash",
    instruction="""You are a presentation architect.
Based on the user's request, generate a JSON object that outlines a presentation.
The JSON should have two keys:
1. "style": A one-word description of the visual theme (e.g., "modern", "professional", "creative").
2. "slides": A list of strings, where each string is the main topic or title for a single slide.

Example Request: "Make a presentation about the history of space exploration."
Example Output:
```json
{
  "style": "vintage",
  "slides": [
    "The Dawn of the Space Age",
    "The Apollo Program and the Moon Landing",
    "The Space Shuttle Era",
    "The International Space Station",
    "The Future: Mars and Beyond"
  ]
}
```

Output *only* the raw JSON object.
""",
    description="Generates a JSON plan for a presentation including style and slide topics.",
    output_key="json_plan"
)

# Code Reviewer Agent
# Takes the code generated by the previous agent (read from state) and provides feedback.
Slide_writer_agent = LlmAgent(
    name="Writes the final slide",
    model="gemini-2.0-flash",
    # Change 3: Improved instruction, correctly using state key injection
    instruction="""You are an expert content creator specializing in engaging presentation slides. Your task is to write the content for a single slide based on the topic provided.

The output must be in clear and concise markdown format. It should include:
- A main heading for the slide title (using '#').
- A brief introductory sentence.
- 3 to 5 key bullet points that elaborate on the slide's topic.

**Overall Presentation Topic:** {presentation_context}
**Current Slide Topic:** {slide_topic}

---
Example:
**Overall Presentation Topic:** "The benefits of renewable energy"
**Current Slide Topic:** "Solar Power Explained"

Example Output:
# Solar Power Explained
Solar power is the conversion of energy from sunlight into electricity. It is a clean and abundant source of renewable energy.
- **Photovoltaic (PV) Panels:** These panels directly convert sunlight into electric current using semiconductor materials.
- **Concentrated Solar Power (CSP):** This method uses mirrors to concentrate sunlight to heat a fluid, which then drives a generator.
- **Global Impact:** Solar energy is the fastest-growing source of new electricity generation worldwide.
- **Cost Reduction:** The cost of solar panels has dropped by over 80% in the last decade, making it highly competitive.
---

Now, generate the content for the provided topics. Output *only* the raw markdown.
""",
    description="Writes the text content for a single slide based on a topic.",
    output_key="slide_content"
)


# Code Refactorer Agent
# Takes the original code and the review comments (read from state) and refactors the code.
slide_render_agent = LlmAgent(
    name="SlideHtmlRenderer",
    model="gemini-1.5-flash",
    instruction="""You are an HTML and CSS designer.
Convert the given markdown content into a single, self-contained HTML slide.
The slide should be visually appealing and styled according to the provided theme.
Use inline CSS or a `<style>` block. The entire output must be a single HTML structure, like a `<div>`.

**Theme:** {style}
**Markdown Content:**
{slide_content}

Output *only* the HTML for the slide.
""",
    description="Renders markdown content into a styled HTML slide.",
    output_key="slide_html",
)

slide_loop_agent = LoopAgent(
    name="RefinementLoop",
    # Agent order is crucial: Critique first, then Refine/Exit
    sub_agents=[
        Slide_writer_agent,
        slide_render_agent
    ],
    max_iterations=5 # Limit loops
)

# --- 2. Create the SequentialAgent ---
# This agent orchestrates the pipeline by running the sub_agents in order.
code_pipeline_agent = SequentialAgent(
    name="CodePipelineAgent",
    sub_agents=[Slide_count_agent, slide_loop_agent],
    description="Executes a sequence of code writing, reviewing, and refactoring.",
    # The agents will run in the order provided:
)

# For ADK tools compatibility, the root agent must be named `root_agent`
root_agent = code_pipeline_agent